// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: authen_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenClient is the client API for Authen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	SignUp(ctx context.Context, in *UserDetailInfo, opts ...grpc.CallOption) (*SignUpResponse, error)
	EditUser(ctx context.Context, in *EditUserRequest, opts ...grpc.CallOption) (*EditUserResponse, error)
	GetFriendFollower(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*FriendFollower, error)
	GetPostDetail(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*Post, error)
	FollowFriend(ctx context.Context, in *FollowFriendRequest, opts ...grpc.CallOption) (*FollowFriendResponse, error)
	UnfollowFriend(ctx context.Context, in *UnfollowFriendRequest, opts ...grpc.CallOption) (*UnfollowFriendResponse, error)
	GetFollowerList(ctx context.Context, in *GetFollowerListRequest, opts ...grpc.CallOption) (*GetFollowerListResponse, error)
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error)
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error)
	EditPost(ctx context.Context, in *EditPostRequest, opts ...grpc.CallOption) (*EditPostResponse, error)
	CreatePostComment(ctx context.Context, in *CreatePostCommentRequest, opts ...grpc.CallOption) (*CreatePostCommentResponse, error)
	LikePost(ctx context.Context, in *LikePostRequest, opts ...grpc.CallOption) (*LikePostResponse, error)
}

type authenClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenClient(cc grpc.ClientConnInterface) AuthenClient {
	return &authenClient{cc}
}

func (c *authenClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/pb.Authen/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenClient) SignUp(ctx context.Context, in *UserDetailInfo, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, "/pb.Authen/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenClient) EditUser(ctx context.Context, in *EditUserRequest, opts ...grpc.CallOption) (*EditUserResponse, error) {
	out := new(EditUserResponse)
	err := c.cc.Invoke(ctx, "/pb.Authen/EditUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenClient) GetFriendFollower(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*FriendFollower, error) {
	out := new(FriendFollower)
	err := c.cc.Invoke(ctx, "/pb.Authen/GetFriendFollower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenClient) GetPostDetail(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/pb.Authen/GetPostDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenClient) FollowFriend(ctx context.Context, in *FollowFriendRequest, opts ...grpc.CallOption) (*FollowFriendResponse, error) {
	out := new(FollowFriendResponse)
	err := c.cc.Invoke(ctx, "/pb.Authen/FollowFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenClient) UnfollowFriend(ctx context.Context, in *UnfollowFriendRequest, opts ...grpc.CallOption) (*UnfollowFriendResponse, error) {
	out := new(UnfollowFriendResponse)
	err := c.cc.Invoke(ctx, "/pb.Authen/UnfollowFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenClient) GetFollowerList(ctx context.Context, in *GetFollowerListRequest, opts ...grpc.CallOption) (*GetFollowerListResponse, error) {
	out := new(GetFollowerListResponse)
	err := c.cc.Invoke(ctx, "/pb.Authen/GetFollowerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, "/pb.Authen/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenClient) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error) {
	out := new(GetPostResponse)
	err := c.cc.Invoke(ctx, "/pb.Authen/GetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error) {
	out := new(DeletePostResponse)
	err := c.cc.Invoke(ctx, "/pb.Authen/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenClient) EditPost(ctx context.Context, in *EditPostRequest, opts ...grpc.CallOption) (*EditPostResponse, error) {
	out := new(EditPostResponse)
	err := c.cc.Invoke(ctx, "/pb.Authen/EditPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenClient) CreatePostComment(ctx context.Context, in *CreatePostCommentRequest, opts ...grpc.CallOption) (*CreatePostCommentResponse, error) {
	out := new(CreatePostCommentResponse)
	err := c.cc.Invoke(ctx, "/pb.Authen/CreatePostComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenClient) LikePost(ctx context.Context, in *LikePostRequest, opts ...grpc.CallOption) (*LikePostResponse, error) {
	out := new(LikePostResponse)
	err := c.cc.Invoke(ctx, "/pb.Authen/LikePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenServer is the server API for Authen service.
// All implementations must embed UnimplementedAuthenServer
// for forward compatibility
type AuthenServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	SignUp(context.Context, *UserDetailInfo) (*SignUpResponse, error)
	EditUser(context.Context, *EditUserRequest) (*EditUserResponse, error)
	GetFriendFollower(context.Context, *UserInfo) (*FriendFollower, error)
	GetPostDetail(context.Context, *GetPostRequest) (*Post, error)
	FollowFriend(context.Context, *FollowFriendRequest) (*FollowFriendResponse, error)
	UnfollowFriend(context.Context, *UnfollowFriendRequest) (*UnfollowFriendResponse, error)
	GetFollowerList(context.Context, *GetFollowerListRequest) (*GetFollowerListResponse, error)
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error)
	DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error)
	EditPost(context.Context, *EditPostRequest) (*EditPostResponse, error)
	CreatePostComment(context.Context, *CreatePostCommentRequest) (*CreatePostCommentResponse, error)
	LikePost(context.Context, *LikePostRequest) (*LikePostResponse, error)
	mustEmbedUnimplementedAuthenServer()
}

// UnimplementedAuthenServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenServer struct {
}

func (UnimplementedAuthenServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthenServer) SignUp(context.Context, *UserDetailInfo) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedAuthenServer) EditUser(context.Context, *EditUserRequest) (*EditUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUser not implemented")
}
func (UnimplementedAuthenServer) GetFriendFollower(context.Context, *UserInfo) (*FriendFollower, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendFollower not implemented")
}
func (UnimplementedAuthenServer) GetPostDetail(context.Context, *GetPostRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostDetail not implemented")
}
func (UnimplementedAuthenServer) FollowFriend(context.Context, *FollowFriendRequest) (*FollowFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowFriend not implemented")
}
func (UnimplementedAuthenServer) UnfollowFriend(context.Context, *UnfollowFriendRequest) (*UnfollowFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowFriend not implemented")
}
func (UnimplementedAuthenServer) GetFollowerList(context.Context, *GetFollowerListRequest) (*GetFollowerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowerList not implemented")
}
func (UnimplementedAuthenServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedAuthenServer) GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedAuthenServer) DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedAuthenServer) EditPost(context.Context, *EditPostRequest) (*EditPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPost not implemented")
}
func (UnimplementedAuthenServer) CreatePostComment(context.Context, *CreatePostCommentRequest) (*CreatePostCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePostComment not implemented")
}
func (UnimplementedAuthenServer) LikePost(context.Context, *LikePostRequest) (*LikePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikePost not implemented")
}
func (UnimplementedAuthenServer) mustEmbedUnimplementedAuthenServer() {}

// UnsafeAuthenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenServer will
// result in compilation errors.
type UnsafeAuthenServer interface {
	mustEmbedUnimplementedAuthenServer()
}

func RegisterAuthenServer(s grpc.ServiceRegistrar, srv AuthenServer) {
	s.RegisterService(&Authen_ServiceDesc, srv)
}

func _Authen_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Authen/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authen_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetailInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Authen/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServer).SignUp(ctx, req.(*UserDetailInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authen_EditUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServer).EditUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Authen/EditUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServer).EditUser(ctx, req.(*EditUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authen_GetFriendFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServer).GetFriendFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Authen/GetFriendFollower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServer).GetFriendFollower(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authen_GetPostDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServer).GetPostDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Authen/GetPostDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServer).GetPostDetail(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authen_FollowFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServer).FollowFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Authen/FollowFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServer).FollowFriend(ctx, req.(*FollowFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authen_UnfollowFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServer).UnfollowFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Authen/UnfollowFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServer).UnfollowFriend(ctx, req.(*UnfollowFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authen_GetFollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServer).GetFollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Authen/GetFollowerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServer).GetFollowerList(ctx, req.(*GetFollowerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authen_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Authen/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authen_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Authen/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServer).GetPost(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authen_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Authen/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authen_EditPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServer).EditPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Authen/EditPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServer).EditPost(ctx, req.(*EditPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authen_CreatePostComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServer).CreatePostComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Authen/CreatePostComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServer).CreatePostComment(ctx, req.(*CreatePostCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authen_LikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenServer).LikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Authen/LikePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenServer).LikePost(ctx, req.(*LikePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Authen_ServiceDesc is the grpc.ServiceDesc for Authen service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authen_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Authen",
	HandlerType: (*AuthenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Authen_Login_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _Authen_SignUp_Handler,
		},
		{
			MethodName: "EditUser",
			Handler:    _Authen_EditUser_Handler,
		},
		{
			MethodName: "GetFriendFollower",
			Handler:    _Authen_GetFriendFollower_Handler,
		},
		{
			MethodName: "GetPostDetail",
			Handler:    _Authen_GetPostDetail_Handler,
		},
		{
			MethodName: "FollowFriend",
			Handler:    _Authen_FollowFriend_Handler,
		},
		{
			MethodName: "UnfollowFriend",
			Handler:    _Authen_UnfollowFriend_Handler,
		},
		{
			MethodName: "GetFollowerList",
			Handler:    _Authen_GetFollowerList_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _Authen_CreatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _Authen_GetPost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _Authen_DeletePost_Handler,
		},
		{
			MethodName: "EditPost",
			Handler:    _Authen_EditPost_Handler,
		},
		{
			MethodName: "CreatePostComment",
			Handler:    _Authen_CreatePostComment_Handler,
		},
		{
			MethodName: "LikePost",
			Handler:    _Authen_LikePost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authen_service.proto",
}
