// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
        user_name,
        hashed_password,
        salt,
        first_name,
        last_name,
        date_of_birth,
        email
    )
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, hashed_password, salt, first_name, last_name, date_of_birth, email, user_name
`

type CreateUserParams struct {
	UserName       string    `json:"user_name"`
	HashedPassword string    `json:"hashed_password"`
	Salt           string    `json:"salt"`
	FirstName      string    `json:"first_name"`
	LastName       string    `json:"last_name"`
	DateOfBirth    time.Time `json:"date_of_birth"`
	Email          string    `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserName,
		arg.HashedPassword,
		arg.Salt,
		arg.FirstName,
		arg.LastName,
		arg.DateOfBirth,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.Salt,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Email,
		&i.UserName,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, hashed_password, salt, first_name, last_name, date_of_birth, email, user_name
FROM "user"
WHERE user_name = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, userName string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, userName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.Salt,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Email,
		&i.UserName,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET user_name = $1,
    hashed_password = $2,
    salt = $3,
    first_name = $4,
    last_name = $5,
    date_of_birth = $6,
    email = $7
WHERE id = $8
RETURNING id, hashed_password, salt, first_name, last_name, date_of_birth, email, user_name
`

type UpdateUserParams struct {
	UserName       string    `json:"user_name"`
	HashedPassword string    `json:"hashed_password"`
	Salt           string    `json:"salt"`
	FirstName      string    `json:"first_name"`
	LastName       string    `json:"last_name"`
	DateOfBirth    time.Time `json:"date_of_birth"`
	Email          string    `json:"email"`
	ID             int64     `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.UserName,
		arg.HashedPassword,
		arg.Salt,
		arg.FirstName,
		arg.LastName,
		arg.DateOfBirth,
		arg.Email,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.Salt,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Email,
		&i.UserName,
	)
	return i, err
}
